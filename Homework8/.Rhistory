prostate_model = lm(lpsa ~ ., data = prostate);
summary(prostate_model)$r.squared
# Chunk 7
plot(fitted(prostate_model), resid(prostate_model), col = "blue", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted vs Residuals")
abline(h = 0, col = "orange", lwd = 2)
# Chunk 8
bptest(prostate_model)
# Chunk 9
bptest(prostate_model)$p.value
# Chunk 10
shapiro.test(resid(prostate_model))
shapiro.test(resid(prostate_model))$p.value
# Chunk 11
par(mfrow = c(1, 1))
hist(resid(prostate_model),
xlab   = "Residuals",
main   = "Histogram of Residuals, prostate_model",
col    = "darkorange",
border = "dodgerblue",
breaks = 20)
# Chunk 12
qqnorm(resid(prostate_model), main = "Normal Q-Q Plot, prostate_model", col = "darkgrey")
qqline(resid(prostate_model), col = "dodgerblue", lwd = 2)
# Chunk 13
lvg_hats = hatvalues(prostate_model)
prostate_high_indexes = as.vector(which(lvg_hats > 2 * mean(lvg_hats)));
prostate[prostate_high_indexes,]
# Chunk 14
(prostate_influential = as.vector(which(cooks.distance(prostate_model) > 4 / length(cooks.distance(prostate_model)))))
# Chunk 15
prostate_rem = prostate[-prostate_influential,]
prostate_rem_model = lm(lpsa ~ ., data = prostate_rem)
coef(prostate_model)
coef(prostate_rem_model)
# Chunk 16
rem_observation = prostate[prostate_influential,];
predict(prostate_model, newdata = rem_observation)
predict(prostate_rem_model, newdata = rem_observation)
# Chunk 17
n = 50
set.seed(420)
x_1 = runif(n, 0, 5)
x_2 = runif(n, -2, 2)
# Chunk 18
set.seed(83)
library(lmtest)
y_1 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = 1)
fit_1 = lm(y_1 ~ x_1 + x_2)
bptest(fit_1)
# Chunk 19
set.seed(83)
y_2 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = abs(x_2))
fit_2 = lm(y_2 ~ x_1 + x_2)
bptest(fit_2)
# Chunk 20
num_sims = 2500
p_val_1 = rep(0, num_sims)
p_val_2 = rep(0, num_sims)
birthday = 19081014
set.seed(birthday)
p_valuesdf = data.frame(
p_val_1 = rep(0, num_sims),
p_val_2 = rep(0, num_sims)
)
for (i in 1:2500) {
y_1 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = 1)
fit_1 = lm(y_1 ~ x_1 + x_2)
p_valuesdf$p_val_1[i] = summary(fit_1)$coefficients[3, 4]
y_2 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = abs(x_2))
fit_2 = lm(y_2 ~ x_1 + x_2)
p_valuesdf$p_val_2[i] = summary(fit_2)$coefficients[3, 4]
}
library(knitr)
results = data.frame(
model_A = c(prop_01_pval1 = length(p_valuesdf$p_val_1[p_valuesdf$p_val_1 < .01]) / nrow(p_valuesdf),
prop_05_pval1 = length(p_valuesdf$p_val_1[p_valuesdf$p_val_1 < .05]) / nrow(p_valuesdf),
prop_10_pval1 = length(p_valuesdf$p_val_1[p_valuesdf$p_val_1 < .10]) / nrow(p_valuesdf)),
model_B = c(prop_01_pval2 = length(p_valuesdf$p_val_2[p_valuesdf$p_val_2 < .01]) / nrow(p_valuesdf),
prop_05_pval2 = length(p_valuesdf$p_val_2[p_valuesdf$p_val_2 < .05]) / nrow(p_valuesdf),
prop_10_pval2 = length(p_valuesdf$p_val_2[p_valuesdf$p_val_2 < .10]) / nrow(p_valuesdf))
)
kable(t(results), col.names = c("P Values < .01", "P Values < .05", "P Values < .10"))
model_corr = lm(loss ~ Fe, data = corrosion);
plot(loss ~ Fe,
data = corrosion,
main = "Weight loss/day vs Iron Content",
col = "orange",
pch = 20,
cex = 1.5,
xlab = "Iron %",
ylab = "Weight Loss (mg/dm^2/day)"
);
abline(model_corr, col = "dodgerblue", lwd = 2);
par(mfrow = c(1, 2))
plot(fitted(model_corr), resid(model_corr), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals")
abline(h = 0, col = "orange", lwd = 2)
qqnorm(resid(model_corr), main = "Q-Q Plot", col = "grey")
qqline(resid(model_corr), col = "dodgerblue", lwd = 2)
model_poly2 = lm(loss ~ Fe + I(Fe^2), data = corrosion);
model_poly3 = lm(loss ~ Fe + I(Fe^2) + I(Fe^3), data = corrosion);
model_poly4 = lm(loss ~ Fe + I(Fe^2) + I(Fe^3) + I(Fe^4), data = corrosion);
# To Fit side by side
par(mfrow = c(1, 3))
# degree 2
plot(fitted(model_poly2), resid(model_poly2), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals Poly 2")
abline(h = 0, col = "DodgerBlue", lwd = 2);
# degree 3
plot(fitted(model_poly3), resid(model_poly3), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals Poly 3")
abline(h = 0, col = "DodgerBlue", lwd = 2);
#degree 4
plot(fitted(model_poly4), resid(model_poly4), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals Poly 4")
abline(h = 0, col = "DodgerBlue", lwd = 2);
#bptest
bp_pval_poly3 = bptest(model_poly3)$p.value;
bp_pval_poly3
model_poly4 = bptest(model_poly4)$p.value;
model_poly4
#shapiro
poly_3_norm = shapiro.test(resid(model_poly3))$p.value
poly_3_norm
model_poly4 = shapiro.test(resid(model_poly4))$p.value
model_poly4
#bptest
bp_pval_poly3 = bptest(model_poly3)$p.value;
bp_pval_poly3
model_poly4 = bptest(model_poly4)$p.value;
model_poly4
#bptest
bp_pval_poly3 = bptest(model_poly3)$p.value
bp_pval_poly3
model_poly4 = bptest(model_poly4)$p.value
model_poly4
bp_pval_poly3 = bptest(model_poly3)$p.value
bp_pval_poly3
model_poly4 = bptest(model_poly4)$p.value
model_poly4
poly_3_norm = shapiro.test(resid(model_poly3))$p.value
poly_3_norm
model_poly4 = shapiro.test(resid(model_poly4))$p.value
model_poly4
anova(model_poly4, model_poly3)
anova(model_poly4, model_poly3)
anova(model_poly4, model_poly3)
model_poly2 = lm(loss ~ Fe + I(Fe^2), data = corrosion);
model_poly3 = lm(loss ~ Fe + I(Fe^2) + I(Fe^3), data = corrosion);
model_poly4 = lm(loss ~ Fe + I(Fe^2) + I(Fe^3) + I(Fe^4), data = corrosion);
# To Fit side by side
par(mfrow = c(1, 3))
# degree 2
plot(fitted(model_poly2), resid(model_poly2), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals Poly 2")
abline(h = 0, col = "DodgerBlue", lwd = 2);
# degree 3
plot(fitted(model_poly3), resid(model_poly3), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals Poly 3")
abline(h = 0, col = "DodgerBlue", lwd = 2);
#degree 4
plot(fitted(model_poly4), resid(model_poly4), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals Poly 4")
abline(h = 0, col = "DodgerBlue", lwd = 2);
anova(model_poly4, model_poly3)
#bptest
bp_pval_poly3 = bptest(model_poly3)$p.value
bp_pval_poly3
bp_pval_poly4 = bptest(model_poly4)$p.value
bp_pval_poly4
#shapiro
poly_3_norm = shapiro.test(resid(model_poly3))$p.value
poly_3_norm
poly_4_norm = shapiro.test(resid(model_poly4))$p.value
poly_4_norm
diamonds_model = lm(price ~ carat, data = diamonds);
summary(diamonds_model)
library(ggplot2)
diamonds_model = lm(price ~ carat, data = diamonds);
summary(diamonds_model)
plot(price ~ carat,
data = diamonds,
main = "Price vs Carat",
col = "grey",
pch = 20,
cex = 1.5,
xlab = "Carat",
ylab = "Price"
);
abline(diamonds_model, col = "blue", lwd = 2);
# fitted vs resid
plot(fitted(diamonds_model), resid(diamonds_model), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals")
abline(h = 0, col = "darkorange", lwd = 2)
library(faraway)
library(lmtest)
diamonds_model = lm(price ~ carat, data = diamonds);
summary(diamonds_model)
plot(price ~ carat,
data = diamonds,
main = "Price vs Carat",
col = "grey",
pch = 20,
cex = 1.5,
xlab = "Carat",
ylab = "Price"
);
abline(diamonds_model, col = "blue", lwd = 2);
plot(price ~ carat,
data = diamonds,
main = "Price vs Carat",
col = "grey",
pch = 20,
xlab = "Carat",
ylab = "Price"
);
abline(diamonds_model, col = "blue", lwd = 2);
# fitted vs resid
plot(fitted(diamonds_model), resid(diamonds_model), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals")
abline(h = 0, col = "darkorange", lwd = 2)
# Q-Q plot
qqnorm(resid(diamonds_model), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(diamonds_model), col = "dodgerblue", lwd = 2)
# Q-Q plot
qqnorm(resid(diamonds_model), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(diamonds_model), col = "dodgerblue", lwd = 2)
qplot(price, data = diamonds, bins = 30)
diamonds_logres_model = lm(log(price) ~ carat, data = diamonds);
plot(log(price) ~ carat, data = diamonds, col = "grey", pch = 20, cex = 1.5, main = "Price by Carat")
abline(diamonds_logres_model, col = "dodgerblue", lwd = 2);
qplot(price, data = diamonds, bins = 30)
diamonds_logres_model = lm(log(price) ~ carat, data = diamonds);
plot(log(price) ~ carat, data = diamonds, col = "grey", pch = 20, cex = 1.5, main = "Price by Carat")
abline(diamonds_logres_model, col = "dodgerblue", lwd = 2)
par(mfrow = c(1, 2))
# fitted vs resid
plot(fitted(diamonds_logres_model), resid(diamonds_logres_model), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals")
abline(h = 0, col = "darkorange", lwd = 2)
# Q-Q plot`
qqnorm(resid(diamonds_logres_model), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(diamonds_logres_model), col = "dodgerblue", lwd = 2)
diamonds_logboth_model = lm(log(price) ~ log(carat), data = diamonds)
diamonds_logboth_model = lm(log(price) ~ log(carat), data = diamonds)
plot(log(price) ~ log(carat), data = diamonds, col = "grey", pch = 20, cex = 1.5, main = "Price by Carat")
abline(diamonds_logboth_model, col = "dodgerblue", lwd = 2)
par(mfrow = c(1, 2))
# fitted vs resid
plot(fitted(diamonds_logboth_model), resid(diamonds_logboth_model), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals")
abline(h = 0, col = "darkorange", lwd = 2)
# Q-Q plot`
qqnorm(resid(diamonds_logboth_model), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(diamonds_logboth_model), col = "dodgerblue", lwd = 2)
(price_pred = predict(diamonds_logboth_model, newdata = data.frame("carat" = 3), interval = "prediction", level = 0.99))
#lower
exp(price_pred[2])
#Upper
exp(price_pred[3])
#Price
exp(price_pred[1,1])
# Chunk 1: setup
options(scipen = 1, digits = 4, width = 80, fig.alin = "center")
# Chunk 2
diagnostics = function(model, pcol = 'grey', lcol = 'dodgerblue', alpha = 0.05, plotit = TRUE, testit = TRUE) {
if(plotit){
plot(fitted(model), resid(model), col = pcol, pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted vs Residuals")
abline(h = 0, col = lcol, lwd = 2)
qqnorm(resid(model), main = "Normal Q-Q Plot, fit_1", col = pcol)
qqline(resid(model), col = lcol, lwd = 2)
}
if(testit){
return_results = data.frame("p_val" = 0, "decision" = 0);
return_results["p_val"] = shapiro.test(resid(model))$p.value
if(return_results["p_val"] > alpha){
return_results["decision"] = "Fail to Reject";
} else {
return_results["decision"] = "Reject";
}
return_results
}
}
# Chunk 3
set.seed(40)
data_1 = data.frame(x = runif(n = 30, min = 0, max = 10),
y = rep(x = 0, times = 30))
data_1$y = with(data_1, 2 + 1 * x + rexp(n = 30))
fit_1 = lm(y ~ x, data = data_1)
data_2 = data.frame(x = runif(n = 20, min = 0, max = 10),
y = rep(x = 0, times = 20))
data_2$y = with(data_2, 5 + 2 * x + rnorm(n = 20))
fit_2 = lm(y ~ x, data = data_2)
data_3 = data.frame(x = runif(n = 40, min = 0, max = 10),
y = rep(x = 0, times = 40))
data_3$y = with(data_3, 2 + 1 * x + rnorm(n = 40, sd = x))
fit_3 = lm(y ~ x, data = data_3)
# Chunk 4
diagnostics(fit_1, plotit = FALSE)$p_val
diagnostics(fit_2, plotit = FALSE)$decision
diagnostics(fit_1, testit = FALSE, pcol = "black", lcol = "black")
diagnostics(fit_2, testit = FALSE, pcol = "grey", lcol = "green")
diagnostics(fit_3)
# Chunk 5
library(faraway)
library(lmtest)
# Chunk 6
prostate_model = lm(lpsa ~ ., data = prostate);
summary(prostate_model)$r.squared
# Chunk 7
plot(fitted(prostate_model), resid(prostate_model), col = "blue", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted vs Residuals")
abline(h = 0, col = "orange", lwd = 2)
# Chunk 8
bptest(prostate_model)
# Chunk 9
bptest(prostate_model)$p.value
# Chunk 10
shapiro.test(resid(prostate_model))
shapiro.test(resid(prostate_model))$p.value
# Chunk 11
par(mfrow = c(1, 1))
hist(resid(prostate_model),
xlab   = "Residuals",
main   = "Histogram of Residuals, prostate_model",
col    = "darkorange",
border = "dodgerblue",
breaks = 20)
# Chunk 12
qqnorm(resid(prostate_model), main = "Normal Q-Q Plot, prostate_model", col = "darkgrey")
qqline(resid(prostate_model), col = "dodgerblue", lwd = 2)
# Chunk 13
lvg_hats = hatvalues(prostate_model)
prostate_high_indexes = as.vector(which(lvg_hats > 2 * mean(lvg_hats)));
prostate[prostate_high_indexes,]
# Chunk 14
(prostate_influential = as.vector(which(cooks.distance(prostate_model) > 4 / length(cooks.distance(prostate_model)))))
# Chunk 15
prostate_rem = prostate[-prostate_influential,]
prostate_rem_model = lm(lpsa ~ ., data = prostate_rem)
coef(prostate_model)
coef(prostate_rem_model)
# Chunk 16
rem_observation = prostate[prostate_influential,];
predict(prostate_model, newdata = rem_observation)
predict(prostate_rem_model, newdata = rem_observation)
# Chunk 17
n = 50
set.seed(420)
x_1 = runif(n, 0, 5)
x_2 = runif(n, -2, 2)
# Chunk 18
set.seed(83)
library(lmtest)
y_1 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = 1)
fit_1 = lm(y_1 ~ x_1 + x_2)
bptest(fit_1)
# Chunk 19
set.seed(83)
y_2 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = abs(x_2))
fit_2 = lm(y_2 ~ x_1 + x_2)
bptest(fit_2)
# Chunk 20
num_sims = 2500
p_val_1 = rep(0, num_sims)
p_val_2 = rep(0, num_sims)
birthday = 19081014
set.seed(birthday)
# Chunk 21
p_valuesdf = data.frame(
p_val_1 = rep(0, num_sims),
p_val_2 = rep(0, num_sims)
)
for (i in 1:2500) {
y_1 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = 1)
fit_1 = lm(y_1 ~ x_1 + x_2)
p_valuesdf$p_val_1[i] = summary(fit_1)$coefficients[3, 4]
y_2 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = abs(x_2))
fit_2 = lm(y_2 ~ x_1 + x_2)
p_valuesdf$p_val_2[i] = summary(fit_2)$coefficients[3, 4]
}
# Chunk 22
library(knitr)
results = data.frame(
model_A = c(prop_01_pval1 = length(p_valuesdf$p_val_1[p_valuesdf$p_val_1 < .01]) / nrow(p_valuesdf),
prop_05_pval1 = length(p_valuesdf$p_val_1[p_valuesdf$p_val_1 < .05]) / nrow(p_valuesdf),
prop_10_pval1 = length(p_valuesdf$p_val_1[p_valuesdf$p_val_1 < .10]) / nrow(p_valuesdf)),
model_B = c(prop_01_pval2 = length(p_valuesdf$p_val_2[p_valuesdf$p_val_2 < .01]) / nrow(p_valuesdf),
prop_05_pval2 = length(p_valuesdf$p_val_2[p_valuesdf$p_val_2 < .05]) / nrow(p_valuesdf),
prop_10_pval2 = length(p_valuesdf$p_val_2[p_valuesdf$p_val_2 < .10]) / nrow(p_valuesdf))
)
kable(t(results), col.names = c("P Values < .01", "P Values < .05", "P Values < .10"))
# Chunk 23
library(faraway)
# Chunk 24
model_corr = lm(loss ~ Fe, data = corrosion);
plot(loss ~ Fe,
data = corrosion,
main = "Weight loss/day vs Iron Content",
col = "orange",
pch = 20,
cex = 1.5,
xlab = "Iron %",
ylab = "Weight Loss (mg/dm^2/day)"
);
abline(model_corr, col = "dodgerblue", lwd = 2);
# Chunk 25
par(mfrow = c(1, 2))
plot(fitted(model_corr), resid(model_corr), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals")
abline(h = 0, col = "orange", lwd = 2)
qqnorm(resid(model_corr), main = "Q-Q Plot", col = "grey")
qqline(resid(model_corr), col = "dodgerblue", lwd = 2)
# Chunk 26
bp_pvalue = bptest(model_corr)$p.value
# Chunk 27
shapiro_pvalue = shapiro.test(resid(model_corr))$p.value
# Chunk 28
model_poly2 = lm(loss ~ Fe + I(Fe^2), data = corrosion);
model_poly3 = lm(loss ~ Fe + I(Fe^2) + I(Fe^3), data = corrosion);
model_poly4 = lm(loss ~ Fe + I(Fe^2) + I(Fe^3) + I(Fe^4), data = corrosion);
# To Fit side by side
par(mfrow = c(1, 3))
# degree 2
plot(fitted(model_poly2), resid(model_poly2), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals Poly 2")
abline(h = 0, col = "DodgerBlue", lwd = 2);
# degree 3
plot(fitted(model_poly3), resid(model_poly3), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals Poly 3")
abline(h = 0, col = "DodgerBlue", lwd = 2);
#degree 4
plot(fitted(model_poly4), resid(model_poly4), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals Poly 4")
abline(h = 0, col = "DodgerBlue", lwd = 2);
# Chunk 29
#bptest
bp_pval_poly3 = bptest(model_poly3)$p.value
bp_pval_poly3
# Chunk 30
#shapiro
poly_3_norm = shapiro.test(resid(model_poly3))$p.value
poly_3_norm
# Chunk 31
cooks.distance(model_poly3) > 4 / length(cooks.distance(model_poly3))
# Chunk 32
library(ggplot2)
# Chunk 33
diamonds_model = lm(price ~ carat, data = diamonds);
summary(diamonds_model)
# Chunk 34
plot(price ~ carat,
data = diamonds,
main = "Price vs Carat",
col = "grey",
pch = 20,
cex = 1.5,
xlab = "Carat",
ylab = "Price"
);
abline(diamonds_model, col = "blue", lwd = 2);
# Chunk 35
# fitted vs resid
plot(fitted(diamonds_model), resid(diamonds_model), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals")
abline(h = 0, col = "darkorange", lwd = 2)
# Chunk 36
# Q-Q plot
qqnorm(resid(diamonds_model), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(diamonds_model), col = "dodgerblue", lwd = 2)
# Chunk 37
qplot(price, data = diamonds, bins = 30)
# Chunk 38
diamonds_logres_model = lm(log(price) ~ carat, data = diamonds);
plot(log(price) ~ carat, data = diamonds, col = "grey", pch = 20, cex = 1.5, main = "Price by Carat")
abline(diamonds_logres_model, col = "dodgerblue", lwd = 2)
# Chunk 39
par(mfrow = c(1, 2))
# fitted vs resid
plot(fitted(diamonds_logres_model), resid(diamonds_logres_model), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals")
abline(h = 0, col = "darkorange", lwd = 2)
# Chunk 40
# Q-Q plot`
qqnorm(resid(diamonds_logres_model), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(diamonds_logres_model), col = "dodgerblue", lwd = 2)
# Chunk 41
diamonds_logboth_model = lm(log(price) ~ log(carat), data = diamonds)
plot(log(price) ~ log(carat), data = diamonds, col = "grey", pch = 20, cex = 1.5, main = "Price by Carat")
abline(diamonds_logboth_model, col = "dodgerblue", lwd = 2)
# Chunk 42
par(mfrow = c(1, 2))
# fitted vs resid
plot(fitted(diamonds_logboth_model), resid(diamonds_logboth_model), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals")
abline(h = 0, col = "darkorange", lwd = 2)
# Chunk 43
# Q-Q plot`
qqnorm(resid(diamonds_logboth_model), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(diamonds_logboth_model), col = "dodgerblue", lwd = 2)
# Chunk 44
(price_pred = predict(diamonds_logboth_model, newdata = data.frame("carat" = 3), interval = "prediction", level = 0.99))
# Chunk 45
#lower
exp(price_pred[2])
# Chunk 46
#Upper
exp(price_pred[3])
#Price
exp(price_pred[1])
